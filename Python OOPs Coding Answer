# 1. Create a class Person with attributes name and age. Add a method to display them.

# class Person:
#     def __init__(self,name,age):
#         self.name=name
#         self.age=age
        
#     def display(self):
#         print(f"name of the student: {self.name} age of the student:{self.age}")
    

# ob1=Person("Rushi",22)
# ob1.display()


# 2. Write a class Rectangle with length and width. Add a method to calculate area and perimeter.

# class Rectangle:
#     def __init__(self,length,width):
#         self.length=length
#         self.width=width
    
#     def calculate(self):
#         area=self.length * self.width
#         perimeter=2*(self.length * self.width)
#         print("area of the Rectange:",area)
#         print("perimeter of the Rectangle:",perimeter)
        

# c1=Rectangle(5,5)
# c1.calculate()


# 3. Create a class Student with constructor to initialize name and marks. Add a method to check
# pass/fail

# class Student:
#     def __init__(self,name,marks):
#         self.name=name
#         self.marks=marks
    
#     def check(self):
#         if self.marks>=35:
#             print(f"pass of the student:{self.name} marks of the student:{self.marks}")
            
#         else:
#             print(f"fail the student:{self.name} marks of the student{self.marks}")
                
# c1=Student("Rushi",34)
# c1.check()
# c2=Student("Krishna",36)
# c2.check()


# 4. Create a class Book: initialize title, author, and price. Add a method to display details.

# class Book:
#     def __init__(self,title,author,price):
#         self.title=title
#         self.author=author
#         self.price=price
#     def display(self):
#         print(f"Title Of The Book:{self.title},Author Of The Book:{self.author},Price of the Book:{self.price}")
        
# c1=Book("RKCOMPANY","RUSHIKARPE",500)
# c1.display()

# 5. Create a base class Vehicle with method start(). Inherit a class Car from it with a method drive().


# class Vehicle:
#     def start(self):
#         print("Start The Vehicle")
        
# class Car(Vehicle):
#     def drive(self):
#         print("Drive the car")
        
# c1=Car()
# c1.start()
# c1.drive()


# 6. Create class Employee. Manager and Developer inherit from it. Add unique methods for each.


# class Employee:
#     def display(self):
#         print("Name of the Employee:Rushi")

# class Manager(Employee):
#     def show_Manager(self):
#         print("Name of the Manager Mahesh")
        
# class Developer(Employee):
#     def show_Developer(self):
#         print("Name of the krishna")
        
# c1=Employee()
# c1.display()
# c2=Manager()
# c2.show_Manager()
# c3=Developer()
# c3.show_Developer()




# 7. Override show() method in child class to show different message than parent class

# class Parent:
#     def show(self):
#         print("How to Cover The Syallbus before Exam")
        
# class Child(Parent):
#     def show(self):
#         print("to show how parent class is child inherti properties of the Parent")
        

# c1=Child()
# c1.show()


# 8. Create class Account with private attribute balance. Add methods to deposit/withdraw and get
#  balance safely.

class Account:
    def __init__(self,balance):
        self.__balance=balance
    
    def deposit(self,amount):
        if amount >0:
           self.__balance+=amount
        else:
            print("Deposit amount must be positive")

    def Withdraw(self,amount):
        if amount<=0:
            print("Withdrew amount must be positive")
            
        elif amount >self.__balance:
            print("insufficient balance")
        
        else:
            self.__balance-=amount


    #getter and setter for private attribute
    
    def  get_balance_Safely(self):
        return self.__balance
    
acc=Account(1000)
acc.Withdraw(500)
acc.Withdraw(500)
acc.deposit(50000)
print("current Balance:",acc.get_balance_Safely())


  9. Write two classes Cat and Dog, both have a method speak(). Call speak() on both objects in a
#  loop

# class Cat:
#     def speak(self):
#         print("MAU MAU")
        
# class Dog:
#     def speak(self):
#         print("BOOU BOOU")
# cat = Cat()
# dog = Dog()
     
# for animal in (cat, dog):
#     animal.speak()


# # 10. Create a class TemperatureConverter with static method celsius_to_fahrenheit(c) and
# #  fahrenheit_to_celsius(f).

# class Temp:
    
#     @staticmethod
#     def celsius_to_fahrenheit(c):
#         f = (c * 9/5) + 32
#         print("Fahrenheit:", f)

#     @staticmethod
#     def fahrenheit_to_celsius(f):
#         c = (f - 32) * 5/9
#         print("Celsius:", c)

# c1=Temp()
# c2=Temp()

# c1.celsius_to_fahrenheit(0)
# c2.fahrenheit_to_celsius(99)



#  11. Create a class User with class variable user_count. Track how many objects are created using a
#  class method.
# class User:
#     user_count = 0

#     def __init__(self):
#         User.user_count += 1

#     @classmethod
#     def total_user(cls):
#         print("Total user created:", cls.user_count)

# u1 = User()
# u2 = User()
# u3 = User()

# User.total_user()

#  12. Use ABC module to create abstract class Shape with method area(). Inherit classes like Circle,
#  Square and implement area() accordingly.


# from abc import ABC,abstractmethod

# class Shape(ABC):
    
#     @abstractmethod
#     def area(self):
#         pass

# class Circle(Shape):
#     def area(self,radius):
#         self.radius=radius
#         # area = π × r²
#         area=3.14 * self.radius * self.radius
#         print("Area of Circle:", area)
# class Square(Shape):
#     def area(self,side):
#         self.side=side
#         area = side * side
#         print("Area of Square:", area)
        
# c = Circle()
# c.area(5)

# s = Square()
# s.area(4)

#  13. Build a mini banking system where a Customer can create an account, deposit, and check
#  balance. Use encapsulation and class methods.
    
class Customer:
    __bank_name="Mini Bank"
    
    def __init__(self,name,balance):
        self.name=name
        self.__balance=balance
    
    def deposit(self,amount):
        if amount>0:
            self.__balance+=amount
            
        else:
            print("Deposit Must be Positive")
            
    def check_balance(self):
        return self.__balance
    
    @classmethod
    def get_bank_name(cls):
        return cls.__bank_name
    
c1=Customer("Rushikesh",500)
c1.deposit(500)

print("Balance:",c1.check_balance())
print("Bank",Customer.get_bank_name())




    
    
# 14. Create a class Product, subclass Electronics and Clothing. Use polymorphism to call a common
#  method get_discounted_price() differently.

# class Product:
#     def __init__(self,price):
#         self.price=price
        
#     def get_discounted_price(self):
#         return self.price

# class Electronics(Product):
#     def get_discounted_price(self):
#         return self.price * 0.90  # 10% off

# class Clothing(Product):
#     def get_discounted_price(self):
#         return self.price * 0.80  # 20% off

# products = [Electronics(10000), Clothing(2000)]

# for item in products:
#     print("Discounted Price:", item.get_discounted_price())
    
